{"meta":{"title":"Hiko","subtitle":null,"description":null,"author":"Hiko","url":"http://machu.club","root":"/"},"pages":[],"posts":[{"title":"idea 通过跳板机 远程debug","slug":"idea 通过跳板机 远程debug","date":"2019-10-17T16:00:00.000Z","updated":"2019-10-18T17:36:53.423Z","comments":false,"path":"2019/10/18/idea 通过跳板机 远程debug/","link":"","permalink":"http://machu.club/2019/10/18/idea 通过跳板机 远程debug/","excerpt":"","text":"首先在 java 启动的时候加上参数: 指定一个端口 (以下为5066 )1Java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5066 -jar 然后通过远程建立ssh通道将本地的5066,代理到服务机的5066端口上:1ssh -l $JUMP_SERVER_USER -L 5066:$SERVER_IP:5066 -p $JUMP_SERVER_PORT $JUMP_SERVER_IP JUMP_SERVER_USER : 是跳板机账号 SERVER_IP : 是服务器的ip，跳板机通过该ip可连接到服务器 JUMP_SERVER_PORT : 是指跳板机的ssh端口 JUMP_SERVER_IP : 是指跳板机的ip 然后idea上配置远程debug后启动即可 成功","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"http://machu.club/categories/技术笔记/"}],"tags":[{"name":"idea","slug":"idea","permalink":"http://machu.club/tags/idea/"}]},{"title":"Java内存模型  -  Java memory model","slug":"Java内存模型  -  Java memory model","date":"2019-09-17T16:00:00.000Z","updated":"2019-10-18T17:36:56.908Z","comments":false,"path":"2019/09/18/Java内存模型  -  Java memory model/","link":"","permalink":"http://machu.club/2019/09/18/Java内存模型  -  Java memory model/","excerpt":"","text":"Java的内存结构，也就是运行时的数据区域： pc寄存器／程序计数器每个线程都需要有一个独立的程序计数器 Java栈(Java stack) 每创建一个线程，创建对应的Java栈 每一个Java栈中包含多个栈帧(Stack Frame) 栈帧会含有一些局部变量、操作栈和方法返回值等信息 每当一个方法执行完成时，该栈帧就会弹出栈帧的元素作为这个方法的返回值，并且清除这个栈帧 Java栈的栈顶的栈帧就是当前正在执行的活动栈(正在执行的方法) PC寄存器也会指向该地址 只有这个活动的栈帧的本地变量可以被操作栈使用 在这个栈帧中调用另一个方法时,新创建的栈帧会被放到栈顶,这个方法运行完时,栈帧被移除,之前的栈帧被重新变为活动栈,且调用方法的返回值会成为这个栈帧操作栈中的一个操作数 堆(Heap) Jvm里内存最大的一块,启动时创建 被所有Java线程锁共享,不是线程安全 存储Java对象的地方 所有的对象实例以及数组都要在堆上分配 Java堆是GC管理的主要区域 方法区(Method Area) 存放了要加载的类的信息（名称、修饰符等）、类中的静态常量、类中定义为final类型的常量、类中的Field信息、类中的方法信息 当在程序中通过Class对象的getName.isInterface等方法来获取信息时，这些数据都来源于方法区 被Java线程锁共享的 不会频繁被GC回收，在一定条件下会被GC 也是堆中的一部分，通常所说的Java堆中的永久区 Permanet Generation 常量池(Constant Pool) 本身是方法区中的一个数据结构。 存储了如字符串、final变量值、类名和方法名常量。 在编译期间就被确定，并保存在已编译的.class文件中。 一般分为两类：字面量和引用量。字面量就是字符串、final变量等。类名和方法名属于引用量。引用量最常见的是在调用方法的时候，根据方法名找到方法的引用，并以此定位到函数体进行函数代码的执行。引用量包含：类和接口的权限定名、字段的名称和描述符，方法的名称和描述符。 本地方法栈(Native Method Stack) 和Java栈所发挥的作用非常相似 区别:Java栈为JVM执行Java方法服务,本地方法栈为JVM执行Native方法服务 JMM主内存和工作内存Monitor 所有的变量都存储在主内存（Main Memory）中 每个线程还有自己的工作内存（Working Memory），线程的工作内存中保存了该线程使用到的变量的主内存的副本拷贝 线程之间值的传递都需要通过主内存来完成","categories":[{"name":"知识点","slug":"知识点","permalink":"http://machu.club/categories/知识点/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://machu.club/tags/Java/"}]}]}