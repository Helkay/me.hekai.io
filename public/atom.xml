<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hiko</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://machu.club/"/>
  <updated>2019-10-19T04:45:12.686Z</updated>
  <id>http://machu.club/</id>
  
  <author>
    <name>Hiko</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>idea 通过跳板机 远程debug</title>
    <link href="http://machu.club/2019/10/18/2019/10/idea%20%E9%80%9A%E8%BF%87%E8%B7%B3%E6%9D%BF%E6%9C%BA%20%E8%BF%9C%E7%A8%8Bdebug/"/>
    <id>http://machu.club/2019/10/18/2019/10/idea 通过跳板机 远程debug/</id>
    <published>2019-10-17T16:00:00.000Z</published>
    <updated>2019-10-19T04:45:12.686Z</updated>
    
    <content type="html"><![CDATA[<p><strong>首先在 java 启动的时候加上参数:  指定一个端口 (以下为5066 )</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=5066 -jar</span><br></pre></td></tr></table></figure></p><p><strong>然后通过远程建立ssh通道将本地的5066,代理到服务机的5066端口上:</strong><br><img src="http://pic.machu.club/7B7A6C95-FDCE-41EA-81C8-2CBBA264688E.png" alt="fbebf4d4e38d675a257ba74843e226ad.png"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -l <span class="variable">$JUMP_SERVER_USER</span> -L 5066:<span class="variable">$SERVER_IP</span>:5066 -p <span class="variable">$JUMP_SERVER_PORT</span> <span class="variable">$JUMP_SERVER_IP</span></span><br></pre></td></tr></table></figure></p><ul><li>JUMP_SERVER_USER : 是跳板机账号</li><li>SERVER_IP : 是服务器的ip，跳板机通过该ip可连接到服务器</li><li>JUMP_SERVER_PORT : 是指跳板机的ssh端口</li><li>JUMP_SERVER_IP : 是指跳板机的ip</li></ul><p><strong>然后idea上配置远程debug后启动即可</strong></p><p><img src="http://pic.machu.club/01C0C1C9-3B6C-401C-9791-77D90805D528.png" alt="fa01c4506935523fb577211b575963b8.png"></p><p><strong>成功</strong><br><img src="http://pic.machu.club/E9755145-FA55-4D07-99B0-D785A224A5C6.png" alt="64125b2a2bb457c6c51c64955dd45c5f.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;首先在 java 启动的时候加上参数:  指定一个端口 (以下为5066 )&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Idea" scheme="http://machu.club/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型  -  Java memory model</title>
    <link href="http://machu.club/2018/05/27/2018/05/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%20%20-%20%20Java%20memory%20model/"/>
    <id>http://machu.club/2018/05/27/2018/05/Java内存模型  -  Java memory model/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2019-10-19T04:53:01.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java的内存结构，也就是运行时的数据区域："><a href="#Java的内存结构，也就是运行时的数据区域：" class="headerlink" title="Java的内存结构，也就是运行时的数据区域："></a>Java的内存结构，也就是运行时的数据区域：</h2><p><img src="http://pic.machu.club/33824419-2CE7-4D17-BA98-22933CB80E7C.png" alt="fe1abe8a5220acf543c1aaf98ab5bedb.png"></p><h3 id="pc寄存器／程序计数器"><a href="#pc寄存器／程序计数器" class="headerlink" title="pc寄存器／程序计数器"></a>pc寄存器／程序计数器</h3><p>每个线程都需要有一个独立的程序计数器</p><h3 id="Java栈-Java-stack"><a href="#Java栈-Java-stack" class="headerlink" title="Java栈(Java stack)"></a>Java栈(Java stack)</h3><ul><li>每创建一个线程，创建对应的Java栈</li><li>每一个Java栈中包含多个栈帧(Stack Frame)</li><li>栈帧会含有一些局部变量、操作栈和方法返回值等信息</li><li>每当一个方法执行完成时，该栈帧就会弹出栈帧的元素作为这个方法的返回值，并且清除这个栈帧</li><li>Java栈的栈顶的栈帧就是当前正在执行的活动栈(正在执行的方法)</li><li>PC寄存器也会指向该地址</li><li>只有这个活动的栈帧的本地变量可以被操作栈使用</li><li>在这个栈帧中调用另一个方法时,新创建的栈帧会被放到栈顶,这个方法运行完时,栈帧被移除,之前的栈帧被重新变为活动栈,且调用方法的返回值会成为这个栈帧操作栈中的一个操作数</li></ul><p><img src="http://pic.machu.club/57BD88FF-5694-4CB5-B34B-5F0E04E343F0.png" alt="684fe763be5087cd7919448796f585c6.png"></p><h3 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆(Heap)"></a>堆(Heap)</h3><ul><li>Jvm里内存最大的一块,启动时创建</li><li>被所有Java线程锁共享,不是线程安全</li><li>存储Java对象的地方</li><li>所有的对象实例以及数组都要在堆上分配</li><li>Java堆是GC管理的主要区域</li></ul><h3 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h3><ul><li>存放了要加载的类的信息（名称、修饰符等）、类中的静态常量、类中定义为final类型的常量、类中的Field信息、类中的方法信息</li><li>当在程序中通过Class对象的getName.isInterface等方法来获取信息时，这些数据都来源于方法区</li><li>被Java线程锁共享的</li><li>不会频繁被GC回收，在一定条件下会被GC</li><li>也是堆中的一部分，通常所说的Java堆中的永久区 Permanet Generation</li></ul><h3 id="常量池-Constant-Pool"><a href="#常量池-Constant-Pool" class="headerlink" title="常量池(Constant Pool)"></a>常量池(Constant Pool)</h3><ul><li>本身是方法区中的一个数据结构。</li><li>存储了如字符串、final变量值、类名和方法名常量。</li><li>在编译期间就被确定，并保存在已编译的.class文件中。</li><li>一般分为两类：字面量和引用量。字面量就是字符串、final变量等。类名和方法名属于引用量。引用量最常见的是在调用方法的时候，根据方法名找到方法的引用，并以此定位到函数体进行函数代码的执行。引用量包含：类和接口的权限定名、字段的名称和描述符，方法的名称和描述符。</li></ul><h3 id="本地方法栈-Native-Method-Stack"><a href="#本地方法栈-Native-Method-Stack" class="headerlink" title="本地方法栈(Native Method Stack)"></a>本地方法栈(Native Method Stack)</h3><ul><li>和Java栈所发挥的作用非常相似</li><li>区别:Java栈为JVM执行Java方法服务,本地方法栈为JVM执行Native方法服务</li></ul><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><h3 id="主内存和工作内存"><a href="#主内存和工作内存" class="headerlink" title="主内存和工作内存"></a>主内存和工作内存</h3><p><em>Monitor</em></p><ul><li>所有的变量都存储在主内存（Main Memory）中</li><li>每个线程还有自己的工作内存（Working Memory），线程的工作内存中保存了该线程使用到的变量的主内存的副本拷贝</li><li>线程之间值的传递都需要通过主内存来完成</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java的内存结构，也就是运行时的数据区域：&quot;&gt;&lt;a href=&quot;#Java的内存结构，也就是运行时的数据区域：&quot; class=&quot;headerlink&quot; title=&quot;Java的内存结构，也就是运行时的数据区域：&quot;&gt;&lt;/a&gt;Java的内存结构，也就是运行时的数据区
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Java" scheme="http://machu.club/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>linux 服务器下 docker 初体验</title>
    <link href="http://machu.club/2018/05/10/2018/05/linux%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8B%20docker%20%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://machu.club/2018/05/10/2018/05/linux 服务器下 docker 初体验/</id>
    <published>2018-05-09T16:00:00.000Z</published>
    <updated>2019-10-19T04:36:25.397Z</updated>
    
    <content type="html"><![CDATA[<p>系统版本:** CentOS-7-x86_64-Minimal-1804</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>使用 <code>yum install docker</code> 命令安装docker</p><p>使用非centos 7的版本可能会报以下错误<br> <code>No package docker available</code></p><p>没有找到docker包,需要第三方软件库<code>epel</code>,使用一下以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  sudo yum install epel-release</span><br></pre></td></tr></table></figure><p>然后再安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  sudo yum install docker-io</span><br></pre></td></tr></table></figure><h2 id="修改国内docker加速配置"><a href="#修改国内docker加速配置" class="headerlink" title="修改国内docker加速配置"></a>修改国内docker加速配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~ vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>修改 <code>&quot;registry-mirrors&quot;</code> 为相应的国内加速地址</p><p>修改好配置文件后，重新加载并启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~ systemctl daemon-reload</span><br><span class="line">☁  ~ systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="以下我会以在docker中使用jenkins为例-列举docker的一些基本使用方法"><a href="#以下我会以在docker中使用jenkins为例-列举docker的一些基本使用方法" class="headerlink" title="以下我会以在docker中使用jenkins为例,列举docker的一些基本使用方法"></a>以下我会以在docker中使用jenkins为例,列举docker的一些基本使用方法</h2><ul><li>下载jenkins镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  docker pull jenkins</span><br></pre></td></tr></table></figure><ul><li>创建jenkins文件夹 用来做挂载磁盘</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  mkdir /home/hiko/jenkins</span><br></pre></td></tr></table></figure><p><strong><em>注意：在安装jenkins时候，挂在文件夹/home/hzq/jenkins/的归属用户id必须是1000，否则会抛出无操作权限异常。</em></strong></p><ul><li>查看文件夹属性</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  ls -nd /home/hiko/jenkins/</span><br></pre></td></tr></table></figure><ul><li>修改文件夹 <code>归属者</code> 和 <code>组</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  chown -R 1000:1000 jenkins/</span><br></pre></td></tr></table></figure><ul><li>启动jenkins </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  docker run -itd -p 8080:8080 -p 50000:50000 --name jenkins --privileged=<span class="literal">true</span>  -v /home/hiko/jenkins:/var/jenkins_home jenkins</span><br></pre></td></tr></table></figure><p><code>-p 8080:8080 -p 50000:50000</code> : 映射端口</p><p><code>--privileged=true</code> : 在CentOS7中的安全模块selinux把权限禁掉了，参数给容器加权。</p><p><code>-v /home/hiko/jenkins:/var/jenkins_home</code> : 磁盘挂载</p><h2 id="查看containers储存地址"><a href="#查看containers储存地址" class="headerlink" title="查看containers储存地址"></a>查看containers储存地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  <span class="built_in">cd</span> /var/lib/docker/containers/ &#123;container_ID&#125;</span><br><span class="line">☁  ~  vi config.v2.json</span><br></pre></td></tr></table></figure><p>自定义挂载:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"MountPoints"</span>: &#123;</span><br><span class="line">        <span class="attr">"/var/jenkins_home"</span>: &#123;</span><br><span class="line">            <span class="attr">"Source"</span>: <span class="string">"/home/hiko/jenkins"</span>,</span><br><span class="line">            <span class="attr">"Destination"</span>: <span class="string">"/var/jenkins_home"</span>,</span><br><span class="line">            <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Driver"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">            <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span>,</span><br><span class="line">            <span class="attr">"Spec"</span>: &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/home/hiko/jenkins"</span>,</span><br><span class="line">                <span class="attr">"Target"</span>: <span class="string">"/var/jenkins_home"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不挂载磁盘,则默认启动后地址:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"MountPoints"</span>: &#123;</span><br><span class="line">        <span class="attr">"/var/jenkins_home"</span>: &#123;</span><br><span class="line">            <span class="attr">"Source"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"Destination"</span>: <span class="string">"/var/jenkins_home"</span>,</span><br><span class="line">            <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"d48f1035be1c76267a404c4fea29ef2f709bdff0ddf0736356cbd4897c7bc87b"</span>,</span><br><span class="line">            <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">            <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">            <span class="attr">"Spec"</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  <span class="built_in">cd</span> /var/lib/docker/volumes</span><br></pre></td></tr></table></figure><h2 id="docker进入容器的几种办法"><a href="#docker进入容器的几种办法" class="headerlink" title="docker进入容器的几种办法"></a>docker进入容器的几种办法</h2><ol><li><p><strong>docker attach</strong><br>使用 <code>docker attach</code> 想要进入命令行界面,有个前提是这个容器必须是用 <code>/bin/bash</code> 创建的。<br><strong>参考资料:</strong>  <a href="https://stackoverflow.com/questions/30960686/difference-between-docker-attach-and-docker-exec" target="_blank" rel="noopener">difference between docker attach and docker exec</a></p></li><li><p><strong>SSH</strong></p></li><li><p><strong>nsenter</strong></p><p><a href="https://github.com/jpetazzo/nsenter" target="_blank" rel="noopener">github链接</a></p></li></ol><ol start="4"><li><strong>docker exec</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  docker <span class="built_in">exec</span> -it 775c7c9ee1e1 /bin/bash</span><br></pre></td></tr></table></figure><p>##docker rm命令-删除一个或多个容器</p><ul><li>显示所有的容器，过滤出Exited状态的容器，取出这些容器的ID，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  docker ps -a | grep Exited|awk <span class="string">'&#123;print $1&#125;'</span></span><br></pre></td></tr></table></figure><ul><li>查询所有的容器，过滤出Exited状态的容器，列出容器ID，删除这些容器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  docker rm `docker ps -a | grep Exited | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统版本:** CentOS-7-x86_64-Minimal-1804&lt;/p&gt;
&lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;p&gt;使用
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker" scheme="http://machu.club/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>安装Centos minimal及一些服务设置</title>
    <link href="http://machu.club/2018/04/05/2018/04/%E5%AE%89%E8%A3%85Centos%20minimal%E5%8F%8A%E4%B8%80%E4%BA%9B%E6%9C%8D%E5%8A%A1%E8%AE%BE%E7%BD%AE/"/>
    <id>http://machu.club/2018/04/05/2018/04/安装Centos minimal及一些服务设置/</id>
    <published>2018-04-04T16:00:00.000Z</published>
    <updated>2019-10-19T04:45:17.102Z</updated>
    
    <content type="html"><![CDATA[<p><strong>系统版本：</strong> CentOS-6.8-x86_64-minimal</p><h4 id="因为装的是minimal版本-所以系统装好后-并连不上网络需要设置一下如下"><a href="#因为装的是minimal版本-所以系统装好后-并连不上网络需要设置一下如下" class="headerlink" title="因为装的是minimal版本,所以系统装好后,并连不上网络需要设置一下如下:"></a>因为装的是minimal版本,所以系统装好后,并连不上网络需要设置一下如下:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">☁  ~  vi ifcfg-eth0</span><br></pre></td></tr></table></figure><p>将ONBOOT=no改为了yes</p><p>然后重启网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  service network restart</span><br></pre></td></tr></table></figure><h4 id="查看是否安装ssh"><a href="#查看是否安装ssh" class="headerlink" title="查看是否安装ssh"></a>查看是否安装ssh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  yum list installed | grep openssh</span><br></pre></td></tr></table></figure><p>如没有安装 则使用以下命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  yum install openssh</span><br></pre></td></tr></table></figure><h4 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  useradd -d /home/hiko hiko</span><br><span class="line">☁  ~  passwd hiko</span><br></pre></td></tr></table></figure><p>若新建用户无ssh权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>添加 <code>AllowUsers:hiko</code></p><p><strong>赋予root权限</strong><br>方法一：修改 <code>/etc/sudoers</code> 文件,找到以下两行,去掉第二行的 <code>#</code>去掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##Allows people in group wheel to run all commands</span></span><br><span class="line">%wheel            ALL=(ALL)           ALL</span><br></pre></td></tr></table></figure><p>然后修改用户，使其属于<code>root</code>组（wheel），命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  usermod -g root hiko</span><br></pre></td></tr></table></figure><p>修改完后，使用hiko帐号登录，命令<code>su -</code>，即可获得root权限。</p><p>方法二：修改 <code>/etc/sudoers</code> 文件,找到以下内容在,root下面一行添加 hiko用户配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere </span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">hiko    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>修改完后，使用hiko帐号登录，命令<code>su -</code>，即可获得root权限。</p><h4 id="ssh登录免密"><a href="#ssh登录免密" class="headerlink" title="ssh登录免密"></a>ssh登录免密</h4><p>使用ssh-keygen命令创建密钥对<br>假设 我现在需要在A机(192.168.1.1)上免密ssh登录到B(192.168.1.2)机</p><p>在A机用户路径中的.ssh文件夹内创建密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  ssh-keygen -t rsa -f id_rsa.xxx  -P <span class="string">''</span></span><br></pre></td></tr></table></figure><ul><li><strong><em>-f 命名生成的文件名称</em></strong></li><li><strong><em>-P ‘’ 无密码 （不加则需要输入三次回车）</em></strong></li></ul><p>这时候.ssh文件夹下会生成两个文件(id_rsa.xxx id_rsa.xxx.pub)</p><p>将id_rsa.xxx.pub 用scp命令传输的B上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  scp id_rsa.xxx.pub root@192.168.1.2:/(B机上.ssh的路径)</span><br></pre></td></tr></table></figure><p>将id_rsa.xxx.pub里的内容写入到 .ssh中的authorized_keys文件中(没有则创建),并修改authorized_keys文件和.ssh文件夹的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  cat id_rsa.xxx.pub&gt;&gt;authorized_keys</span><br><span class="line">☁  ~  chmod 600 authorized_keys</span><br><span class="line">☁  ~  chmod 700 -R .ssh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;系统版本：&lt;/strong&gt; CentOS-6.8-x86_64-minimal&lt;/p&gt;
&lt;h4 id=&quot;因为装的是minimal版本-所以系统装好后-并连不上网络需要设置一下如下&quot;&gt;&lt;a href=&quot;#因为装的是minimal版本-所以系统装好后-并连不上
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://machu.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础之位运算</title>
    <link href="http://machu.club/2017/10/25/2017/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://machu.club/2017/10/25/2017/10/计算机基础之位运算/</id>
    <published>2017-10-24T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:55.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p><strong>机器数</strong></p><p>一个数在计算机中的二进制表示形式,叫做这个数的机器数。</p><p>机器数是带符号的,在计算机用一个数的 <strong><em>最高位</em></strong> 存放符号, <strong><em>正数为0, 负数为1</em></strong>.</p><p>比如,十进制中的数 +3,计算机字长为8位,转换成二进制就是00000011.如果是 -3,就是 10000011 .</p><p>那么，这里的 00000011 和 10000011 就是机器数。</p><p><strong>原码</strong></p><p>原码就是 <strong><em>符号位</em></strong> 加上真值的绝对值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1]原 = 0000 0001</span><br><span class="line"></span><br><span class="line">[-1]原 = 1000 0001</span><br></pre></td></tr></table></figure><p><strong>反码</strong></p><p>正数的反码是其本身</p><p>负数的反码是在其原码的基础上,符号位不变,其余各个位取反.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1] = [00000001]原 = [00000001]反</span><br><span class="line"></span><br><span class="line">[-1] = [10000001]原 = [11111110]反</span><br></pre></td></tr></table></figure><p><strong>补码</strong></p><p>正数的补码就是其本身.</p><p>负数的补码是在其原码的基础上,符号位不变,其余各位取反,最后+1. (即在反码的基础上+1)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[+1] = [00000001]原 = [00000001]反 = [00000001]补</span><br><span class="line"></span><br><span class="line">[-1] = [10000001]原 = [11111110]反 = [11111111]补</span><br></pre></td></tr></table></figure><p><strong>与（&amp;）运算符</strong></p><p>两个操作数中位都为1，结果才为1，否则结果为0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 : 100</span><br><span class="line">7 : 111</span><br><span class="line">a &amp; b = 4 : 100</span><br></pre></td></tr></table></figure><p><strong>或（|）运算符</strong></p><p>两个操作数中位只要有一个为1，那么结果就是1，否则就为0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 : 100</span><br><span class="line">7 : 111</span><br><span class="line">a | b = 7 : 111</span><br></pre></td></tr></table></figure><p><strong>非运算符</strong></p><p>非运算符用符号“~”表示，其运算规律如下:</p><p>如果位为0，结果是1，如果位为1，结果是0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4       : 00000000 00000000 00000000 00000100</span><br><span class="line">~a = -5 : 11111111 11111111 11111111 11111011</span><br></pre></td></tr></table></figure><p><strong>异或运算符</strong></p><p>异或运算符用符号“^”表示，其运算规律如下:</p><p>异或的概念是相同为0不同为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3       : 011</span><br><span class="line">4       : 100</span><br><span class="line">3^4 = 7 : 111</span><br></pre></td></tr></table></figure><p><strong>“&lt;&lt;”和”&gt;&gt;”运算符</strong></p><p>将二进制位 进行左位移和右位移操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11     : 1011</span><br><span class="line">11&lt;&lt;3  : 1011000</span><br><span class="line">11&gt;&gt;3  : 0001</span><br></pre></td></tr></table></figure><p><strong>“&gt;&gt;&gt;”运算符</strong></p><p>“&gt;&gt;&gt;”运算符将用0填充高位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-11     : 11111111111111111111111111110101</span><br><span class="line">11&gt;&gt;&gt;3  : 00011111111111111111111111111110</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;二进制&quot;&gt;&lt;a href=&quot;#二进制&quot; class=&quot;headerlink&quot; title=&quot;二进制&quot;&gt;&lt;/a&gt;二进制&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;机器数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个数在计算机中的二进制表示形式,叫做这个数的机器数。&lt;/p&gt;
&lt;p&gt;机器数
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="计算机基础" scheme="http://machu.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>spring aop事务</title>
    <link href="http://machu.club/2017/06/29/2017/06/spring%20aop%E4%BA%8B%E5%8A%A1/"/>
    <id>http://machu.club/2017/06/29/2017/06/spring aop事务/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:48.732Z</updated>
    
    <content type="html"><![CDATA[<p>由于今天项目配置了spring aop事务发现不生效,检查配置文件如下没有问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysqlTransactionManager"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用annotation注解方式配置事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"mysqlTransactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AOP配置事物 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"mysqlTransactionAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"mysqlTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"rollBack*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置AOP切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"mysqlTransactionPointCut"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">expression</span>=<span class="string">"execution(* com.at.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"mysqlTransactionPointCut"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">advice-ref</span>=<span class="string">"mysqlTransactionAdvice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网上查询了下资料,发现是由于mysql数据库存储引擎导致的, MyISAM不支持事务,需要修改成InnoDB</p><p><strong>查看</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status;</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name engine=innodb;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于今天项目配置了spring aop事务发现不生效,检查配置文件如下没有问题&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="http://machu.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>mysql快速复制数据库</title>
    <link href="http://machu.club/2017/06/20/2017/06/mysql%E5%BF%AB%E9%80%9F%E5%A4%8D%E5%88%B6%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://machu.club/2017/06/20/2017/06/mysql快速复制数据库/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:42.155Z</updated>
    
    <content type="html"><![CDATA[<p>某些时候，为了搭建一个测试环境,需要复制一个已存在的MySQL数据库。</p><p><strong>创建表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE dbtest DEFAULT CHARACTER SET utf8 COLLATE UTF8_GENERAL_CI;</span><br></pre></td></tr></table></figure><p><strong>复制数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump db -u root -ppassword --add-drop-table | mysql dbtest -u root -ppassword</span><br></pre></td></tr></table></figure><p>-ppassword : password为密码 如果秘密中有特殊字符需要转译(字符前加上)不然会报(mysqldump: Got error: 1045: Access denied for user ‘root‘@’localhost’ (using password: YES) when trying to connect) </p><p><strong>复制到远程另一台MySQL服务器上</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump db -u root -ppassword --add-drop-table | mysql -h 192.168.1.2  dbtest -u root -ppassword</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某些时候，为了搭建一个测试环境,需要复制一个已存在的MySQL数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建表&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Mysql" scheme="http://machu.club/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql ip授权</title>
    <link href="http://machu.club/2017/05/27/2017/05/mysql%20ip%E6%8E%88%E6%9D%83/"/>
    <id>http://machu.club/2017/05/27/2017/05/mysql ip授权/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:25.475Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">'username'</span>@<span class="string">'127.0.0.1'</span> IDENTIFIED BY <span class="string">'password'</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p><strong>grant语法:</strong></p><p>grant 权限名（所有的权限用all） on 库名（<em>全部）.表名（</em>全部） to ‘要授权的用户名’@’%’(%表示所有的IP，可以只些一个IP） identified by “密码”；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Mysql" scheme="http://machu.club/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://machu.club/2017/05/23/2017/05/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://machu.club/2017/05/23/2017/05/原型模式/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2019-10-19T04:52:28.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>原型模式属于创建型模式的一种,其精髓就在于<strong><em>复制</em></strong>一个存在的实例,而不是去新建。</p><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><p>我们设想一个这样的场景,小明在X宝上购物,选定购买商品后就要去下订单,我们会发现小明购买多次的订单除了购买商品不同,邮寄地址、收件人、联系方式都是一样的,这时候我们就可以使用原型模型来创建订单了。</p><div align="center"><br><img src="http://pic.machu.club/pic/prototype.png" style="width:700px;" alt="图片名称" align="center"><br></div><p><strong>Prototype:</strong> 实现Cloneable接口(Cloneable就相当于Prototype接口) 重写Object的clone方法,如果不实现Cloneable接口则会抛出CloneNotSupportedException异常</p><p><strong>OrderInfo:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String goodsName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGoodsName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> goodsName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsName</span><span class="params">(String goodsName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsName = goodsName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mobile = mobile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"OrderInfo&#123;"</span> +</span><br><span class="line">                <span class="string">"goodsName='"</span> + goodsName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mobile='"</span> + mobile + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderInfo <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (OrderInfo) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderInfo orderInfo = <span class="keyword">new</span> OrderInfo();</span><br><span class="line">        orderInfo.setAddress(<span class="string">"上海市XXXXX"</span>);</span><br><span class="line">        orderInfo.setMobile(<span class="string">"138XXXXXXXX"</span>);</span><br><span class="line">        orderInfo.setUsername(<span class="string">"小明"</span>);</span><br><span class="line"></span><br><span class="line">        orderInfo.setGoodsName(<span class="string">"零食"</span>);</span><br><span class="line"></span><br><span class="line">        OrderInfo orderInfo1 = orderInfo.clone();</span><br><span class="line">        orderInfo1.setGoodsName(<span class="string">"衣服"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(orderInfo.toString());</span><br><span class="line">        System.out.println(orderInfo1.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OrderInfo&#123;goodsName=<span class="string">'零食'</span>, address=<span class="string">'上海市XXXXX'</span>, username=<span class="string">'小明'</span>, mobile=<span class="string">'138XXXXXXXX'</span>&#125;</span><br><span class="line">OrderInfo&#123;goodsName=<span class="string">'衣服'</span>, address=<span class="string">'上海市XXXXX'</span>, username=<span class="string">'小明'</span>, mobile=<span class="string">'138XXXXXXXX'</span>&#125;</span><br></pre></td></tr></table></figure><p><strong><em>值得一提的是Object类的clone方法为浅拷贝,关于如何实现深拷贝就是对clone方法进行改造了,有关浅拷贝和深拷贝的相关信息请看下面这篇:<a href="http://helkay.me/2017/05/浅拷贝和深拷贝/" target="_blank" rel="noopener">浅拷贝和深拷贝</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;原型模式属于创建型模式的一种,其精髓就在于&lt;strong&gt;&lt;em&gt;复制&lt;/em&gt;&lt;/strong&gt;一个存在的实例,而不是去新建。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://machu.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令 - chmod</title>
    <link href="http://machu.club/2017/05/19/2017/05/Linux%E5%91%BD%E4%BB%A4%20-%20chmod/"/>
    <id>http://machu.club/2017/05/19/2017/05/Linux命令 - chmod/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:16.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><p>文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [-cfvR] [--<span class="built_in">help</span>] [--version] mode file...</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明:"></a>参数说明:</h3><p><strong>mode:</strong> 权限设定字串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li><ul><li>表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li></ul></li><li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将文件 file1.txt 设为所有人皆可读取</span></span><br><span class="line">chmod ugo+r file1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#将目前目录下的所有文件与子目录皆设为任何人可读取 :</span></span><br><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure><p><strong>此外chmod也可以用数字来表示权限如 :</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>语法为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。<br>r=4，w=2，x=1</p><p><strong><em>若用chmod 4755 filename可使此程序具有root的权限</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;功能：&quot;&gt;&lt;a href=&quot;#功能：&quot; class=&quot;headerlink&quot; title=&quot;功能：&quot;&gt;&lt;/a&gt;功能：&lt;/h3&gt;&lt;p&gt;文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。&lt;/p&gt;
&lt;h3 id=&quot;语法
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Linux" scheme="http://machu.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://machu.club/2017/05/19/2017/05/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://machu.club/2017/05/19/2017/05/建造者模式/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2019-10-19T04:52:18.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>建造模式是对象的创建模式。建造模式可以将一个产品的内部表象与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。</p><p>本模式涉及到四个角色，它们分别是：</p><ul><li>产品（Product）角色：</li><li>抽象建造者（Builder）角色</li><li>具体建造者（ConcreteBuilder）角色</li><li>导演者（Director）角色</li></ul><div align="center"><br><img src="http://pic.machu.club/pic/builder.png" style="width:700px;" alt="图片名称" align="center"><br></div><h2 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h2><p><strong>Product</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Builder</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPrice</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">returnProduct</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ConcreteBuilder</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setName(<span class="string">"productName"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setPrice(<span class="keyword">new</span> Double(<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">returnProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> Director</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builder.createName();</span><br><span class="line">        builder.createPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        director.construct();</span><br><span class="line">        Product product = builder.returnProduct();</span><br><span class="line">        System.out.println(product.getName());</span><br><span class="line">        System.out.println(product.getPrice());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;建造模式是对象的创建模式。建造模式可以将一个产品的内部表象与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://machu.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令 - cat</title>
    <link href="http://machu.club/2017/05/15/2017/05/Linux%E5%91%BD%E4%BB%A4%20-%20cat/"/>
    <id>http://machu.club/2017/05/15/2017/05/Linux命令 - cat/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:12.101Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><ul><li>显示文件的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename</span><br></pre></td></tr></table></figure><ul><li>创建文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; filename</span><br></pre></td></tr></table></figure><p>值得一提的是执行这个命令之后会进入一个输入模式,只会保存回车后的内容</p><ul><li>合并内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><p>将 file1 和 file2 的内容合并到 file 中,按照从左至右的先后顺序,如果 file 已存在则会覆盖 file中的内容</p><h3 id="使用权限："><a href="#使用权限：" class="headerlink" title="使用权限："></a>使用权限：</h3><p>所有使用者</p><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p><strong>-n :</strong> 输出每行的行数编号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> -n <span class="built_in">test</span> </span><br><span class="line">1This is the 1th line</span><br><span class="line">2</span><br><span class="line">3This is the 3th line</span><br><span class="line">4</span><br><span class="line">5This is the 5th line</span><br></pre></td></tr></table></figure><p><strong>-b :</strong> 和 -n 差不多,只是不输出空白行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> -b <span class="built_in">test</span></span><br><span class="line">1This is the 1th line</span><br><span class="line"></span><br><span class="line">2This is the 3th line</span><br><span class="line"></span><br><span class="line">3This is the 5th line</span><br></pre></td></tr></table></figure><p><strong>-s :</strong> 将连续两行以上的空白行,用一行空白行来代替</p><p>原文件内容(数字为行号)如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 This is the 1th line</span><br><span class="line">2 </span><br><span class="line">3 </span><br><span class="line">4 This is the 4th line</span><br><span class="line">5 </span><br><span class="line">6 </span><br><span class="line">7 </span><br><span class="line">8 </span><br><span class="line">9 This is the 9th line</span><br></pre></td></tr></table></figure><p>使用-s输出结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cat</span> -s <span class="built_in">test</span> </span><br><span class="line">This is the 1th line</span><br><span class="line"></span><br><span class="line">This is the 4th line</span><br><span class="line"></span><br><span class="line">This is the 9th line</span><br></pre></td></tr></table></figure><p><strong>-v :</strong> 使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外</p><p><strong>-E :</strong> 或 –show-ends : 在每行结束处显示 $</p><p><strong>-T :</strong> 或 –show-tabs: 将 TAB 字符显示为 ^I</p><p><strong>-A :</strong> 等价于 -vET</p><p><strong>-e :</strong> 等价于”-vE”选项</p><p><strong>-t :</strong> 等价于”-vT”选项</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;功能：&quot;&gt;&lt;a href=&quot;#功能：&quot; class=&quot;headerlink&quot; title=&quot;功能：&quot;&gt;&lt;/a&gt;功能：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;显示文件的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Linux" scheme="http://machu.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令 - find</title>
    <link href="http://machu.club/2017/05/15/2017/05/Linux%E5%91%BD%E4%BB%A4%20-%20find/"/>
    <id>http://machu.club/2017/05/15/2017/05/Linux命令 - find/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:20.614Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><p>在指定目录下查找文件,如果不设置任何参数,则find命令将在当前目录下查找子目录与文件</p><h3 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find pathname -options [-<span class="built_in">print</span> -<span class="built_in">exec</span> -ok ...]</span><br></pre></td></tr></table></figure><p><strong>pathname:</strong>  find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。 </p><p><strong>-print:</strong>  find命令将匹配的文件输出到标准输出。 </p><p><strong>-exec:</strong>  find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } \;，注意{   }和\；之间的空格。 </p><p><strong>-ok:</strong>  和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执</p><h3 id="命令选项："><a href="#命令选项：" class="headerlink" title="命令选项："></a>命令选项：</h3><p><strong>-name :</strong>   按照文件名查找文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find . -name filename</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找当前目录包括子目录及子目录里的目录里以.txt结尾的文件</span></span><br><span class="line">find . -name <span class="string">'*.txt'</span></span><br></pre></td></tr></table></figure><p><strong>-perm :</strong>   按照文件权限来查找文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -perm 755</span><br></pre></td></tr></table></figure><p>顺带一提  在linux下权限数字rwx  r=4，w=2，x=1 </p><p><strong>-prune :</strong>  使用这一选项可以使find命令不在当前指定的目录中查找,如果同时使用-depth选项，那么-prune将被find命令忽略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找当前目录下的子目录及子目录中 名为dir文件夹中以.txt结尾的所有文件</span></span><br><span class="line">find . -path <span class="string">'*dir*'</span> -name <span class="string">'*.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只查找当前目录下 以.txt结尾的文件</span></span><br><span class="line">find . -depth 1 -name <span class="string">'*.txt'</span></span><br><span class="line">find . -maxdepth 1 -name <span class="string">'.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找当前目录下名为dir的子目录中所有以.txt结尾的文件</span></span><br><span class="line">find . -path <span class="string">'./dir*'</span> -name <span class="string">'*.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找dir目录中除了子目录dir0下其他子目录中以.txtx结尾的所有文件</span></span><br><span class="line">find . -path <span class="string">'./dir0'</span> -prune -o -name <span class="string">'*.txt'</span> -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><p><strong>-user :</strong>   按照文件属主来查找文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -user Helkay</span><br></pre></td></tr></table></figure><p><strong>-group :</strong>  按照文件所属的组来查找文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -group staff</span><br></pre></td></tr></table></figure><p><strong>-mtime -n +n :</strong>  按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内,+ n表示文件更改时间距现在n天以前。find命令还有-atime和-ctime 选项，但它们都和-m time选项。</p><p><strong>-nogroup :</strong>  查找无有效所属组的文件,即该文件所属的组在/etc/groups中不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出/home内不属于本地组的文件或目录</span></span><br><span class="line">find /home -nogroup</span><br></pre></td></tr></table></figure><p><strong>-nouser :</strong>   查找无有效属主的文件,即该文件的属主在/etc/passwd中不存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出/home内不属于本地用户的文件或目录  </span></span><br><span class="line">find /home -nouser</span><br></pre></td></tr></table></figure><p><strong>-newer file1 ! file2 :</strong>  查找更改时间比文件file1新但比文件file2旧的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -newer tmp.txt ! tmp1.txt</span><br></pre></td></tr></table></figure><p><strong>-type :</strong>  查找某一类型的文件,诸如：</p><ul><li>b - 块设备文件。</li><li>d - 目录。</li><li>c - 字符设备文件。</li><li>p - 管道文件。</li><li>l - 符号链接文件。</li><li>f - 普通文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure><p><strong>-size n：[c,k] :</strong> 查找文件长度为n块的文件,带有c时表示文件长度以字节计。-depth：在查找文件时,首先查找当前目录中的文件,然后再在其子目录中查找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查找当前目录下(包括子目录)文件大于100k 小于200k 的文件</span></span><br><span class="line">find . -size +100k -size -200k</span><br></pre></td></tr></table></figure><p><strong>-fstype :</strong> 查找位于某一类型文件系统中的文件,这些文件系统类型通常可以在配置文件/etc/fstab中找到,该配置文件中包含了本系统中有关文件系统的信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -fstype ext2</span><br></pre></td></tr></table></figure><p><strong>-mount :</strong> 在查找文件时不跨越文件系统mount点。</p><p><strong>-follow :</strong> 如果find命令遇到符号链接文件,就跟踪至链接所指向的文件。</p><p><strong>-cpio :</strong>对匹配的文件使用cpio命令,将这些文件备份到磁带设备中。</p><p>另外,下面三个的区别:</p><p><strong>-amin n :</strong>  查找系统中最后N分钟访问的文件</p><p><strong>-atime n :</strong> 查找系统中最后n*24小时访问的文件</p><p><strong>-cmin n :</strong>  查找系统中最后N分钟被改变文件状态的文件</p><p><strong>-ctime n :</strong> 查找系统中最后n*24小时被改变文件状态的文件</p><p><strong>-mmin n :</strong>  查找系统中最后N分钟被改变文件数据的文件</p><p><strong>-mtime n :</strong> 查找系统中最后n*24小时被改变文件数据的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;功能：&quot;&gt;&lt;a href=&quot;#功能：&quot; class=&quot;headerlink&quot; title=&quot;功能：&quot;&gt;&lt;/a&gt;功能：&lt;/h3&gt;&lt;p&gt;在指定目录下查找文件,如果不设置任何参数,则find命令将在当前目录下查找子目录与文件&lt;/p&gt;
&lt;h3 id=&quot;命令格式：&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Linux" scheme="http://machu.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git命令</title>
    <link href="http://machu.club/2017/05/12/2017/05/Git%E5%91%BD%E4%BB%A4/"/>
    <id>http://machu.club/2017/05/12/2017/05/Git命令/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2019-10-19T04:48:51.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-user-name-uesremail设置"><a href="#Git-user-name-uesremail设置" class="headerlink" title="Git user.name uesremail设置"></a>Git user.name uesremail设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局</span></span><br><span class="line">git config --global user.name  <span class="string">"your_name"</span></span><br><span class="line">git config --global user.emial <span class="string">"your_email"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#局部</span></span><br><span class="line">git config user.name  <span class="string">"your_name"</span></span><br><span class="line">git config user.emial <span class="string">"your_email"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#取消</span></span><br><span class="line">git config --<span class="built_in">unset</span> --global user.name</span><br><span class="line">git config --<span class="built_in">unset</span> --global user.email</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-user-name-uesremail设置&quot;&gt;&lt;a href=&quot;#Git-user-name-uesremail设置&quot; class=&quot;headerlink&quot; title=&quot;Git user.name uesremail设置&quot;&gt;&lt;/a&gt;Git user.na
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Git" scheme="http://machu.club/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java 注解 Annotations</title>
    <link href="http://machu.club/2017/05/11/2017/05/Java%20%E6%B3%A8%E8%A7%A3%20Annotations/"/>
    <id>http://machu.club/2017/05/11/2017/05/Java 注解 Annotations/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:03.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h3><p>  可理解为元数据，即一种描述数据的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"toString..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中我用Override重写了toString()代码,当然即使我不用注解,程序也是能够正常运行的,但加上了Override注解,它会告诉编译器这是个重写的方法,如果我不小心写错了方法名,而父类中没有该方法,则编译器就会报错。</p><h3 id="有关Annotation的一些说明"><a href="#有关Annotation的一些说明" class="headerlink" title="有关Annotation的一些说明"></a>有关Annotation的一些说明</h3><p>java8 版本在 java.lang.annotation提供了六种元注解(Native和Repeatable是java8加入的，其他的是java5),用来注解其他注解:</p><h4 id="Documented-一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。"><a href="#Documented-一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。" class="headerlink" title="@Documented    : 一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。"></a>@Documented    : 一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。</h4><h4 id="Retention-定义该注解的生命周期。"><a href="#Retention-定义该注解的生命周期。" class="headerlink" title="@Retention : 定义该注解的生命周期。"></a>@Retention : 定义该注解的生命周期。</h4><pre><code>RetentionPolicy.SOURCE在编译阶段丢弃。RetentionPolicy.CLASS在类加载的时候丢弃。RetentionPolicy.RUNTIME 始终不会丢弃，运行期也保留该注解。</code></pre><h4 id="Target-表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，那么你需要在定义target包含所有的属性。"><a href="#Target-表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，那么你需要在定义target包含所有的属性。" class="headerlink" title="@Target : 表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，那么你需要在定义target包含所有的属性。"></a>@Target : 表示该注解用于什么地方。如果不明确指出，该注解可以放在任何地方。需要说明的是：属性的注解是兼容的，如果你想给7个属性都添加注解，仅仅排除一个属性，那么你需要在定义target包含所有的属性。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD,ElementType.TYPE,ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestTarget &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.TYPE:用于描述类、接口或enum声明</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestTarget</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestTarget</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TestTarget</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  Annotations &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ElementType.FIELD:用于描述实例变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TestTarget</span> <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.METHOD:用于描述方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TestTarget</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.PARAMETER:用于描述参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(@TestTarget String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.CONSTRUCTOR:用于描述构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTarget</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Annotations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.LOCAL_VARIABLE:用于描述局部变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@TestTarget</span> String name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.ANNOTATION_TYPE:用于描述另一个注释</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotations</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTarget</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotationType &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.PACKAGE 用于记录java文件的package信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestTarget</span></span><br><span class="line"><span class="keyword">package</span> com.helkay.common;</span><br></pre></td></tr></table></figure><p>需要注意的一点是package注解只能写在package-info.java这个文件中</p><p><strong>since 1.8 加入</strong></p><p><strong>ElementType.TYPE_PARAMETER:用于描述类型参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span>&lt;@<span class="title">TestTarget</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ElementType.TYPE_USE:用于描述类型使用</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span>&lt;@<span class="title">TestTarget</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="meta">@TestTarget</span> T&gt; test(<span class="meta">@TestTarget</span> String name)&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;<span class="meta">@TestTarget</span> T&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;? extends T&gt; list2 = <span class="keyword">new</span> ArrayList&lt;<span class="meta">@TestTarget</span> T&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@TestTarget</span> String text;</span><br><span class="line"></span><br><span class="line">        text = (<span class="meta">@TestTarget</span> String)<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        java.util. <span class="meta">@TestTarget</span> Scanner console;</span><br><span class="line"></span><br><span class="line">        console = <span class="keyword">new</span> java.util.<span class="meta">@TestTarget</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;<span class="meta">@TestTarget</span> T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Inherited-定义该注释和子类的关系"><a href="#Inherited-定义该注释和子类的关系" class="headerlink" title="@Inherited : 定义该注释和子类的关系"></a>@Inherited : 定义该注释和子类的关系</h4><p><strong><em>Annotations只支持基本类型、String及枚举类型</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> TestTarget &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;MAN, WOMAN&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">author</span><span class="params">()</span> <span class="keyword">default</span> "Helkay"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Sex <span class="title">sex</span> <span class="params">()</span> <span class="keyword">default</span> Sex.MAN</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>如何使用:</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTarget</span>( sex = TestTarget.Sex.WOMAN , author = <span class="string">"Hiko"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>只有一个属性</em></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@interface</span> TestTarget&#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ TestTarget(<span class="string">"Helkay"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Native-仅仅用来标记native的属性"><a href="#Native-仅仅用来标记native的属性" class="headerlink" title="@Native : 仅仅用来标记native的属性"></a>@Native : 仅仅用来标记native的属性</h4><h4 id="Repeatable-可重复注解的注解"><a href="#Repeatable-可重复注解的注解" class="headerlink" title="@Repeatable : 可重复注解的注解"></a>@Repeatable : 可重复注解的注解</h4><p><strong>不使用Repeatable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@interface</span> TestTarget &#123;</span><br><span class="line">        <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@interface</span> TestTargetArr &#123;</span><br><span class="line">        TestTarget[] value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTargetArr</span>(&#123;<span class="meta">@TestTarget</span>(name = <span class="string">"Helkay"</span>),<span class="meta">@TestTarget</span>(name = <span class="string">"Hiko"</span>)&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Repeatable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Repeatable</span>(TestTargetArr.class)</span><br><span class="line">    <span class="meta">@interface</span> TestTarget &#123;</span><br><span class="line">        <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@interface</span> TestTargetArr &#123;</span><br><span class="line">        TestTarget[] value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TestTarget</span>(name = <span class="string">"Helkay"</span>)</span><br><span class="line">    <span class="meta">@TestTarget</span>(name = <span class="string">"Hiko"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是注解？&quot;&gt;&lt;a href=&quot;#什么是注解？&quot; class=&quot;headerlink&quot; title=&quot;什么是注解？&quot;&gt;&lt;/a&gt;什么是注解？&lt;/h3&gt;&lt;p&gt;  可理解为元数据，即一种描述数据的数据。&lt;/p&gt;
&lt;figure class=&quot;highlight jav
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Java" scheme="http://machu.club/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ssh登录免密</title>
    <link href="http://machu.club/2017/05/10/2017/05/ssh%E7%99%BB%E5%BD%95%E5%85%8D%E5%AF%86/"/>
    <id>http://machu.club/2017/05/10/2017/05/ssh登录免密/</id>
    <published>2017-05-09T16:00:00.000Z</published>
    <updated>2019-10-19T04:49:32.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用ssh-keygen命令创建密钥对"><a href="#使用ssh-keygen命令创建密钥对" class="headerlink" title="使用ssh-keygen命令创建密钥对"></a>使用ssh-keygen命令创建密钥对</h3><p>假设 我现在需要在A机(192.168.1.1)上免密ssh登录到B(192.168.1.2)机</p><p>在A机用户路径中的.ssh文件夹内创建密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f id_rsa.xxx  -P <span class="string">''</span></span><br></pre></td></tr></table></figure><ul><li>-f 命名生成的文件名称</li><li>-P ‘’  无密码 （不加则需要输入三次回车）</li></ul><p>这时候.ssh文件夹下会生成两个文件(id_rsa.xxx  id_rsa.xxx.pub)</p><p>将id_rsa.xxx.pub 用scp命令传输的B上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp id_rsa.xxx.pub root@192.168.1.2:/(B机上.ssh的路径)</span><br></pre></td></tr></table></figure><p>将id_rsa.xxx.pub里的内容写入到 .ssh中的authorized_keys文件中(没有则创建),并修改authorized_keys文件和.ssh文件夹的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.xxx.pub&gt;&gt;authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line"></span><br><span class="line">chmod 700 -R .ssh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用ssh-keygen命令创建密钥对&quot;&gt;&lt;a href=&quot;#使用ssh-keygen命令创建密钥对&quot; class=&quot;headerlink&quot; title=&quot;使用ssh-keygen命令创建密钥对&quot;&gt;&lt;/a&gt;使用ssh-keygen命令创建密钥对&lt;/h3&gt;&lt;p&gt;假设
      
    
    </summary>
    
      <category term="技术笔记" scheme="http://machu.club/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://machu.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://machu.club/2017/05/06/2017/05/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://machu.club/2017/05/06/2017/05/抽象工厂模式/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2019-10-19T04:51:40.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>产品族:</strong> 位于不同产品等级结构中，功能相关联的产品组成的家族</p><p>图中GreenCar和RedCar是两个产品树,而GreenJeepCar和GreenSportCar就是一个产品族,他们都是属于Green色的车。同理RedJeepCar和RedSportCar也是一个产品族。</p><div align="center"><br><img src="http://pic.machu.club/pic/abstract_factory_method.png" style="width:700px;" alt="图片名称" align="center"><br></div><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p><strong>GreenCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getColorGreen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GreenJeepCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenJeepCar</span> <span class="keyword">extends</span> <span class="title">GreenCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColorGreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Get Color Green "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>GreenSportCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenSportCar</span> <span class="keyword">extends</span> <span class="title">GreenCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColorGreen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Get Color Green "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RedCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RedCar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getColorRed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RedJeepCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedJeepCar</span> <span class="keyword">extends</span> <span class="title">RedCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColorRed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Get Color Red "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RedSportCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedSportCar</span> <span class="keyword">extends</span> <span class="title">RedCar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getColorRed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Get Color Red "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> RedCar <span class="title">createRedCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> GreenCar <span class="title">createGreenCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JeepFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JeepFactory</span> <span class="keyword">extends</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedCar <span class="title">createRedCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Create Jeep Car "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedJeepCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GreenCar <span class="title">createGreenCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Create Jeep Car "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreenJeepCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SportFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportFactory</span> <span class="keyword">extends</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedCar <span class="title">createRedCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Create Sport Car "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedSportCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GreenCar <span class="title">createGreenCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" Create Sport Car "</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreenSportCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IFactory sportFactory = <span class="keyword">new</span> SportFactory();</span><br><span class="line"></span><br><span class="line">        GreenCar greenCar = sportFactory.createGreenCar();</span><br><span class="line"></span><br><span class="line">        greenCar.getColorGreen();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽象工厂模式&quot;&gt;&lt;a href=&quot;#抽象工厂模式&quot; class=&quot;headerlink&quot; title=&quot;抽象工厂模式&quot;&gt;&lt;/a&gt;抽象工厂模式&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://machu.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://machu.club/2017/05/04/2017/05/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://machu.club/2017/05/04/2017/05/工厂方法模式/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2019-10-19T04:52:05.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>简单工厂模式是属于创建型模式，又叫做静态工厂方法（Static Factory Method）模式，但不属于23种GOF设计模式之一。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式，可以理解为是不同工厂模式的一个特殊实现。</p><div align="center"><br><img src="http://pic.machu.club/pic/simple_factory_method.png" style="width:700px;" alt="图片名称" align="center"><br></div><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p><strong>ICar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JeepCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JeepCar</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get JeepCar ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SportCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportCar</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get SportCar ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Factory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">getInstance</span><span class="params">(String carType)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"sportCat"</span>.equals(carType))&#123;</span><br><span class="line">            <span class="keyword">return</span> SportCar.class.newInstance();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"jeepCat"</span>.equals(carType))&#123;</span><br><span class="line">            <span class="keyword">return</span> JeepCar.class.newInstance();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"No object is instantiated"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            factory.getInstance(<span class="string">"sportCat"</span>).getCar();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>在上面的简单工厂模式中我们将实例化具体对象的工作全部交给了专门负责创建对象的工厂类中,而工厂模式中则让子类决定实例化哪一个类。遵循了开放—封闭原则</p><div align="center"><br><img src="http://pic.machu.club/pic/factory_method.png" style="width:700px;" alt="图片名称" align="center"><br></div><h3 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h3><p><strong>IFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">ICar <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JeepFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JeepFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"JeepCar create ..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JeepCar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SportFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ICar <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SportCar create ..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SportCar();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ICar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JeepCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JeepCar</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get JeepCar ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SprotCar</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportCar</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Get SportCar ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        IFactory sportFactory = <span class="keyword">new</span> SportFactory();</span><br><span class="line"></span><br><span class="line">        ICar sportFactoryCar = sportFactory.createCar();</span><br><span class="line"></span><br><span class="line">        sportFactoryCar.getCar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://machu.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://machu.club/2017/05/02/2017/05/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://machu.club/2017/05/02/2017/05/单例模式/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2019-10-19T04:48:07.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。"><a href="#单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。" class="headerlink" title="单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。"></a>单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。</h3><ul><li><strong><font color="#e25440" size="4">懒汉式(线程不安全)</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoOne</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemoOne instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemoOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemoOne <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemoOne();</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>延迟加载很明显，但是在多线程不能正常工作</em></strong></p><ul><li><strong><font color="#e25440" size="4">懒汉式(线程安全)</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemoTwo instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemoTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemoTwo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonDemoTwo();</span><br><span class="line">            <span class="comment">//todo</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>延迟加载明显,但是效率很低</em></strong></p><ul><li><strong><font color="#e25440" size="4">饿汉式</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemoThree instance = <span class="keyword">new</span> SingletonDemoThree();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemoThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemoThree <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>在类加载的时候实例化,不能确定是否有其他方法导致类加载,且没有达到延迟加载效果</em></strong></p><ul><li><strong><font color="#e25440" size="4">双重检查[推荐使用]</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoFour</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonDemoFour singleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemoFour</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemoFour <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemoFour.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> SingletonDemoFour();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>线程安全,延迟加载,效率较高。</em></strong></p><ul><li><strong><font color="#e25440" size="4">静态内部类[推荐使用]</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoFive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemoFive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonDemoFive INSTANCE = <span class="keyword">new</span> SingletonDemoFive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemoFive <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><font color="#e25440" size="4">枚举[推荐使用]</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。&quot;&gt;&lt;a href=&quot;#单例模式主要作用是保证在Java应用程序中，一个类Class只有一个实例存在。&quot; class=&quot;headerlink&quot; title=&quot;单例模式主要作用是保证在Ja
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="设计模式" scheme="http://machu.club/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程</title>
    <link href="http://machu.club/2017/05/02/2017/05/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://machu.club/2017/05/02/2017/05/多线程/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2019-10-19T04:48:17.345Z</updated>
    
    <content type="html"><![CDATA[<p>在写设计模式-单例模式的过程中,我需要本地模拟多线程高并发,所以就有了这个笔记。</p><p>名词解释：</p><ul><li>多线程：指的是这个程序（一个进程）运行时产生了不止一个线程</li><li>并行：多个cpu实例或者多台机器同时执行一段处理逻辑,是真正的同时。</li><li>并发：通过cpu调度算法,让用户看上去同时执行,实际上从cpu操作层面不是真正的同时。</li></ul><p>线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。</p><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run start!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread1 t1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        Thread1 t2 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现Runnable类"><a href="#实现Runnable类" class="headerlink" title="实现Runnable类"></a>实现Runnable类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run start!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread2 t1 = <span class="keyword">new</span> Thread2();</span><br><span class="line">        Thread2 t2 = <span class="keyword">new</span> Thread2();</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        简写</span></span><br><span class="line"><span class="comment">//        new Thread(new Thread2()).start();</span></span><br><span class="line"><span class="comment">//        new Thread(new Thread2()).start();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sleep-和wait-的区别"><a href="#sleep-和wait-的区别" class="headerlink" title="sleep()和wait()的区别"></a>sleep()和wait()的区别</h2><p>对于这两个方法,首先得明确一点,sleep()方法是属于Thread类的,而wait()方法则是属于Object类的。</p><ul><li><strong><font color="#e25440">主程序中sleep()</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadDemo1 td1 = <span class="keyword">new</span> ThreadDemo1();</span><br><span class="line">        td1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>); <span class="comment">//主程序中休眠3s</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ThreadDemo2 td2 = <span class="keyword">new</span> ThreadDemo2();</span><br><span class="line">        td2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo1 start run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo2 start run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">48</span>:<span class="number">25</span> -- ThreadDemo1 start run...</span><br><span class="line"><span class="number">15</span>:<span class="number">48</span>:<span class="number">28</span> -- ThreadDemo2 start run...</span><br></pre></td></tr></table></figure><ul><li><strong><font color="#e25440">线程中sleep()</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadDemo1 td1 = <span class="keyword">new</span> ThreadDemo1();</span><br><span class="line">        td1.start();</span><br><span class="line"></span><br><span class="line">        ThreadDemo2 td2 = <span class="keyword">new</span> ThreadDemo2();</span><br><span class="line">        td2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo1 start sleep..."</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo1 start run..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadTest.class)&#123;</span><br><span class="line">            System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo2 start run..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">15</span>:<span class="number">57</span>:<span class="number">52</span> -- ThreadDemo1 start sleep...</span><br><span class="line"><span class="number">15</span>:<span class="number">57</span>:<span class="number">52</span> -- ThreadDemo2 start run...</span><br><span class="line"><span class="number">15</span>:<span class="number">57</span>:<span class="number">55</span> -- ThreadDemo1 start run...</span><br></pre></td></tr></table></figure><p><strong><em>sleep()导致的是程序暂停指定的时间,线程不会释放对象锁。</em></strong></p><ul><li><strong><font color="#e25440">wait()的测试Demo</font></strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadDemo1 td1 = <span class="keyword">new</span> ThreadDemo1();</span><br><span class="line">        td1.start();</span><br><span class="line"></span><br><span class="line">        ThreadDemo2 td2 = <span class="keyword">new</span> ThreadDemo2();</span><br><span class="line">        td2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadTest.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo1 start wait..."</span>);</span><br><span class="line">                ThreadTest.class.wait();</span><br><span class="line">                System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo1 start run..."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadTest.class) &#123;</span><br><span class="line">            System.out.println(ThreadTest.getDate() + <span class="string">" -- ThreadDemo2 start run..."</span>);</span><br><span class="line">            ThreadTest.class.notify();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">05</span>:<span class="number">43</span> -- ThreadDemo1 start wait...</span><br><span class="line"><span class="number">17</span>:<span class="number">05</span>:<span class="number">43</span> -- ThreadDemo2 start run...</span><br><span class="line"><span class="number">17</span>:<span class="number">05</span>:<span class="number">43</span> -- ThreadDemo1 start run...</span><br></pre></td></tr></table></figure><p><strong><em>ThreadDemo1 wait后将资源让给了 ThreadDemo2, ThreadDemo2执行完后唤醒了ThreadDemo1</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在写设计模式-单例模式的过程中,我需要本地模拟多线程高并发,所以就有了这个笔记。&lt;/p&gt;
&lt;p&gt;名词解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程：指的是这个程序（一个进程）运行时产生了不止一个线程&lt;/li&gt;
&lt;li&gt;并行：多个cpu实例或者多台机器同时执行一段处理逻辑,是真正的
      
    
    </summary>
    
      <category term="知识点" scheme="http://machu.club/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="多线程" scheme="http://machu.club/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
